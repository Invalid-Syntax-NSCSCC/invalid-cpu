Index: src/src/pipeline/queue/decode/Decoder_2RI12.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pipeline.queue.decode\n\nimport chisel3._\nimport chisel3.util._\nimport pipeline.queue.bundles.{DecodeOutNdPort, DecodePort}\nimport spec._\nimport spec.Inst.{_2RI12 => Inst}\n\nclass Decoder_2RI12 extends Decoder {\n  io.out := DecodeOutNdPort.default\n\n  val opcode      = WireDefault(io.instInfoPort.inst(31, 22))\n  val imm12       = WireDefault(io.instInfoPort.inst(21, 10))\n  val rj          = WireDefault(io.instInfoPort.inst(9, 5))\n  val rd          = WireDefault(io.instInfoPort.inst(4, 0))\n  val rdIsNotZero = WireDefault(rd.orR)\n\n  def outInfo = io.out.info\n\n  io.out := DontCare\n  // It has immediate\n  io.out.info.isHasImm := true.B\n\n  // Extend immediate\n  val immSext = Wire(SInt(Width.Reg.data))\n  val immZext = Wire(UInt(Width.Reg.data))\n  immSext := imm12.asSInt\n  immZext := imm12\n\n  // Read and write GPR\n  io.out.info.gprReadPorts(0).en   := true.B\n  io.out.info.gprReadPorts(0).addr := rj\n  io.out.info.gprReadPorts(1).en   := false.B\n  io.out.info.gprReadPorts(1).addr := DontCare\n  io.out.info.gprWritePort.en      := rdIsNotZero // true.B\n  io.out.info.gprWritePort.addr    := rd\n\n  // Fallback\n  io.out.info.exeSel         := ExeInst.Sel.none\n  io.out.info.exeOp          := ExeInst.Op.nop\n  io.out.info.imm            := DontCare\n  io.out.isMatched           := false.B\n  io.out.info.jumpBranchAddr := DontCare\n\n  switch(opcode) {\n    is(Inst.slti) {\n      io.out.isMatched   := true.B\n      io.out.info.exeOp  := ExeInst.Op.slt\n      io.out.info.exeSel := ExeInst.Sel.arithmetic\n      io.out.info.imm    := immSext.asUInt\n    }\n    is(Inst.sltui) {\n      io.out.isMatched   := true.B\n      io.out.info.exeOp  := ExeInst.Op.sltu\n      io.out.info.exeSel := ExeInst.Sel.arithmetic\n      io.out.info.imm    := immZext\n    }\n    is(Inst.addi_w) {\n      io.out.isMatched   := true.B\n      io.out.info.exeOp  := ExeInst.Op.add\n      io.out.info.exeSel := ExeInst.Sel.arithmetic\n      io.out.info.imm    := immSext.asUInt\n    }\n    is(Inst.andi) {\n      io.out.isMatched   := true.B\n      io.out.info.exeOp  := ExeInst.Op.and\n      io.out.info.exeSel := ExeInst.Sel.logic\n      io.out.info.imm    := immZext\n    }\n    is(Inst.ori) {\n      io.out.isMatched   := true.B\n      io.out.info.exeOp  := ExeInst.Op.or\n      io.out.info.exeSel := ExeInst.Sel.logic\n      io.out.info.imm    := immZext\n    }\n    is(Inst.xori) {\n      io.out.isMatched   := true.B\n      io.out.info.exeOp  := ExeInst.Op.xor\n      io.out.info.exeSel := ExeInst.Sel.logic\n      io.out.info.imm    := immZext\n    }\n    // LoadStore: read0: rj, read1: store reg src, loadStoreImm: offset\n    is(Inst.ld_b) {\n      io.out.isMatched         := true.B\n      io.out.info.exeOp        := ExeInst.Op.ld_b\n      io.out.info.exeSel       := ExeInst.Sel.loadStore\n      io.out.info.isHasImm     := false.B\n      io.out.info.loadStoreImm := immSext.asUInt\n    }\n    is(Inst.ld_h) {\n      io.out.isMatched         := true.B\n      io.out.info.exeOp        := ExeInst.Op.ld_h\n      io.out.info.exeSel       := ExeInst.Sel.loadStore\n      io.out.info.isHasImm     := false.B\n      io.out.info.loadStoreImm := immSext.asUInt\n    }\n    is(Inst.ld_w) {\n      io.out.isMatched         := true.B\n      io.out.info.exeOp        := ExeInst.Op.ld_w\n      io.out.info.exeSel       := ExeInst.Sel.loadStore\n      io.out.info.isHasImm     := false.B\n      io.out.info.loadStoreImm := immSext.asUInt\n    }\n    is(Inst.ld_bu) {\n      io.out.isMatched         := true.B\n      io.out.info.exeOp        := ExeInst.Op.ld_bu\n      io.out.info.exeSel       := ExeInst.Sel.loadStore\n      io.out.info.isHasImm     := false.B\n      io.out.info.loadStoreImm := immSext.asUInt\n    }\n    is(Inst.ld_hu) {\n      io.out.isMatched         := true.B\n      io.out.info.exeOp        := ExeInst.Op.ld_hu\n      io.out.info.exeSel       := ExeInst.Sel.loadStore\n      io.out.info.isHasImm     := false.B\n      io.out.info.loadStoreImm := immSext.asUInt\n    }\n    is(Inst.st_b) {\n      io.out.isMatched                 := true.B\n      io.out.info.exeOp                := ExeInst.Op.st_b\n      io.out.info.exeSel               := ExeInst.Sel.loadStore\n      io.out.info.isHasImm             := false.B\n      io.out.info.loadStoreImm         := immSext.asUInt\n      io.out.info.gprReadPorts(1).en   := true.B\n      io.out.info.gprReadPorts(1).addr := rd\n      io.out.info.gprWritePort.en      := false.B\n      io.out.info.gprWritePort.addr    := DontCare\n    }\n    is(Inst.st_h) {\n      io.out.isMatched                 := true.B\n      io.out.info.exeOp                := ExeInst.Op.st_h\n      io.out.info.exeSel               := ExeInst.Sel.loadStore\n      io.out.info.isHasImm             := false.B\n      io.out.info.loadStoreImm         := immSext.asUInt\n      io.out.info.gprReadPorts(1).en   := true.B\n      io.out.info.gprReadPorts(1).addr := rd\n      io.out.info.gprWritePort.en      := false.B\n      io.out.info.gprWritePort.addr    := DontCare\n    }\n    is(Inst.st_w) {\n      io.out.isMatched                 := true.B\n      io.out.info.exeOp                := ExeInst.Op.st_w\n      io.out.info.exeSel               := ExeInst.Sel.loadStore\n      io.out.info.isHasImm             := false.B\n      io.out.info.loadStoreImm         := immSext.asUInt\n      io.out.info.gprReadPorts(1).en   := true.B\n      io.out.info.gprReadPorts(1).addr := rd\n      io.out.info.gprWritePort.en      := false.B\n      io.out.info.gprWritePort.addr    := DontCare\n    }\n    is(Inst.preld) {\n      io.out.isMatched              := true.B\n      io.out.info.exeOp             := ExeInst.Op.preld\n      io.out.info.exeSel            := ExeInst.Sel.loadStore\n      io.out.info.isHasImm          := true.B\n      io.out.info.imm               := rd // hint\n      io.out.info.loadStoreImm      := immSext.asUInt\n      io.out.info.gprWritePort.en   := false.B\n      io.out.info.gprWritePort.addr := DontCare\n    }\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/src/pipeline/queue/decode/Decoder_2RI12.scala b/src/src/pipeline/queue/decode/Decoder_2RI12.scala
--- a/src/src/pipeline/queue/decode/Decoder_2RI12.scala	(revision 358404df68b4110e1ad534c30a7173bf58f12443)
+++ b/src/src/pipeline/queue/decode/Decoder_2RI12.scala	(date 1685286242181)
@@ -53,7 +53,7 @@
       io.out.isMatched   := true.B
       io.out.info.exeOp  := ExeInst.Op.sltu
       io.out.info.exeSel := ExeInst.Sel.arithmetic
-      io.out.info.imm    := immZext
+      io.out.info.imm    := immSext.asUInt
     }
     is(Inst.addi_w) {
       io.out.isMatched   := true.B
